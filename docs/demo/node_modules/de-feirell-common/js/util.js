{
    let util = {
        /**
         * This function is a shortcut which is defined as follows:
         * 
         * ```javascript
         * now: performance ? performance.now.bind(performance) : Date.now
         * ```
         * 
         * @function now
         * @returns {number} a timestamp depnding on the used function
         */
        now: performance ? performance.now.bind(performance) : Date.now,
        /**
         * Truncates the given value to an integer, does not check wether or not the given value is a number.
         * 
         * @function floatToInt
         * @param {number} value number to be truncated
         * @returns {number}
         */
        floatToInt: i => i - (i % 1),
        /**
         * Returns the type of the parameter.
         * 
         * ```javascript
         * getTypeOf(12);                   // "Number"
         * getTypeOf(NaN);                  // "Number"
         * getTypeOf(false);                // "Boolean"
         * getTypeOf(undefined);            // "Undefined"
         * getTypeOf(null);                 // "Null"
         * getTypeOf('str');                // "String"
         * getTypeOf(new String("test"));   // "String"
         * getTypeOf(new Date());           // "Date"
         * getTypeOf(/\d+/);                // "RegExp"
         * 
         * function OwnClass(){
         *   this.attr = 12;
         * };
         * 
         * getTypeOf(new OwnClass());       // "Object"
         * ```
         * @function getTypeOf
         * @param {any} subject the subject you want to know the type of
         * @returns {string} the type of the parameter
         */
        getTypeOf: e => Object.prototype.toString.apply(e).slice(8, -1)
    }

    // pretty neat shortcut to define an collection of global functions
    for (let k in util)
        if (!(window[k] instanceof Function))
            Object.defineProperty(window, k, {
                value: util[k]
            });
}